<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【自汉化】[悟琪][笑平]ちち・ち・ちち</title>
    <link href="/2023/01/14/104019192/"/>
    <url>/2023/01/14/104019192/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误了喵" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="52a188f65dd5a189ab01acd76bfee5545e8abd2627700b566430deb8e8daabaf">a639aa54a06334685821c99df14d021d5a8e52878805af0a282006080e9e5b08e2c80fb4f57eed15434e120381a5489263898aebaef122f6bf2b09c9ab6ba6bc6f0d656bd2990a684d1ca2326debcf8dd01677f5c897da49ea163278d25c50736792902aef98875671f55d3729039214d9480c7f18316f309a28f94099ffbaccd29cf55a835b3e24e343f52c6248717bffee2796c3b84df8b71f955343019c02ad52c707834cc5806234e5621c52c63d7916205433e3569a277049ede9fd15ac3c28e21ab8163a8da46b7f7cca36f9b4f609b04f0e587fe3250bb9bffecf5ea618bbe3eb5946bd7b48aee6a768937e49da8af3e9cf868a77b5c9efde7f67d8cceb47c72e256b0ec9e4dc3b17c132df0325e707a56c8bad9d57d6cb4fb416578a0b509055130a4c0cb3291806e8b5d8551b1832f2263021cf45b4eac419b295b3333dad75c369483f3f62d103da166dc046480c6634092ba90d845c9ab50fcbb78f678882467ce1f95053ea89728a39075cc0b83fac99186afa943954736aa4b209ca529c9d7f3883b44369d785bfc1093976d0b200c206f485503dc9070a5f0a8a9ef76c125dd0ced970272f65e8f6ad803e1df765df26ea37092fe3fb0a58fe29ef29914c1285b733b62d146ebbe3c83775bb8e22832c3e17fbc7657940932bb428301ff46ab766ba348b54f6bd2b31697ee6786acaadd48323f4572b87b9c6d92cd4e12a262a50318857bee51effd6806449e1e72977c18d3ae128fab1ecc88341faf5b983c1c1f446b7a33a7c3aae335b7d6162c889e884d54800c6f67a213924f1692fd7a0e95c478d3acc474c758200094f5324b6cdef5b593da4e8efffebcc005f095fb3a56859b5e83304ba3673b7e0970eb4e58ec0d02d82f7868443a2930de95f14c7ff00645b2bf73e3e2e14f8f342430bf56be3827a1e3bcc888438c4ecc9168883fe161b972cf7c8867e0d7f41ff6e24397be45a41f3c315fab3a3387239c95026fc8138960b9698670a2ca3aae319b58bc3e2d56ca7b703d3bbb285d7df0b1cb8e318c64129698ac556dccfc399f6aec9b1468f3d855f7e7daea84951f3dcfb294f08ccea93281b112f94f287fe30931d587aef2a3a542c0c46f1304359eae2aadf546d1a30b06707318bf92450ffb9c03e5baa01518e2230bdb55d97d407d223a88cd50e096f3521785f89299c504852b1cae4b185d4224851a6f7471d85bdbb25a027cc82dff902ed6da2abad296f2e23a6539210404fcf82f748a148d609f2e37f36a341ed7e5ce9f9b8482c9d9e6cdd64db3f3ba3becc2590cab4ce9a9f72f8c60be5dc7aca4ea9fd2ee8de9c646a7fc6619bdf6f09d4d0ea8be17014af8a73478a2b410440f28822a2cf6e04416eeb11567d5288d763b381ce5d45d4d7751a29f20c48c61d5eecd4fa40aac16c27919588f7693378658518c070abd10d6ee8bc1aa5a63f3cdd88f7f6586db34f605136543ae9bb91eb2a77971d6c239c4120af7d382da75c8fcbdcc96b95977d3bd00b6ef78137babfc5a88214da30c58035fef34e77674004c6bef9129fb6f316d97009684f4865c41a9245ba78cabbdc153d245cd4b588573173dac7c11509e4db1ac4c434568830a230102a9aeb81822f5ff11afcd55c0ffe98328ead663d92c22bdf2eb4bd5f7ad718e67eae77f7e9cc1e8934dc8233799ddf604af5d50f4024bbc6061c39d518fd8edb5f14a94344ff0d59cec1160212c7ed3052affece49be07efbf4800c15eccc65880c7769d77f8bfdee61860253265f25d874063be11b3e7459d2a9c421ca39de2871c8b67c52e74dcfbb5dc15a0d77cb44ae7a5bac521081af993bbe4b8eb59d5eed8ac4de33c68a9125105e5381c79f432473cd14aced92453024738ca6d4bd870599e2d0fb67d6a3f96fe042ffb72a7c9ac08adcba8cc7e2099df3d1450618715a89c77728e484920b53f8739942c4b91dead4ebf1ce201cfac86c16b2b9f4abbf4b80a694835cd90578285261bf1e9ab7bd5c9604f8e8854056acb39261fc1b6905a574e53b4288e4e73fa319cbbc97732ffd0e3926b0197f6181a2ed51fa76e3270da2959e17485d42eeb1051e41db8635d817a6a29493ed6d7eb312573518181cb9c92ad01a0a27b1b7f36813e5d889dd17e00d2811b921eea758048e4c11166761310e30f36ca1b957771617c2ac9ec9ee1cfd13e5b8e6e1e0fd9d32f114cfebd9b6d96451e2417a932d3f8c694e04e5cb2c950f4ca53b5743e43fd9893cfdd4a164a43d5bdb45440cbf6522c47d96e4a1852f1dd216c8dcc92dc4ea0eb43cc13db6649a60bdb35036c20e570d174a23e4e0eea61aa6a87699d6b781ea44395bb2d1678f1cc750ea45f2164355082a89901cbe94d42d850ab0dee177d513241b30064600f284685eb7aaa6c44de91f48c8a65a641996e325d472925c0d69b9c05b2365a16a3fe00b54e283a1d5131524ec2256973d280c4cc91474c0d2d0f98f8e3dab9324f8de465c300649bb28dc7ce9fb8d1ff6481b5f18c85122c83387df05f168ad86f6b54c56a8939a4ec9af99ddc035c4d1d244b78838667725eb19a4760feaefb2292ed1147ba1bdee522877b5e1a8c6a377ceda56769d4a04e7c6ca721a401783c52e4346c75f543f5bb5a97e00a9d04ee1e684f999e94aa3f151ddd3e382190376b3031b88e4398035c0a31372a45a620235419d2b3d82dc9ab659bd94be33e0567c364ac3f36f1943940f1ddd14d4b1cf1bc6cfdc105052b4f4381448f6b377af631882666415fb69a3025ef90e6d54b8f455332698d7561cb03ebef62b7d039dd964e1d857ef5a9994cfc622ac5955656401c52e78e78d8af6f37a03bb8bad3c5c4c4d4112d08f5be3e7715afe436bbb27faf416b11b5e9a9a3896bef885761bd6a9bf0492c7f545a93f76b2b3b0375cade47009440520ca7ef383c4098d2630dfb9ea73f3bf42d9fbdcb47e3120d8d3352fd54426792307a744a4b4751fbfd8a2c4b4b0deee7fd878fb8538ddf71ba646f6f43634fdb7c370135b42d49698a857bfdad5610030735162530628102fb92b2167e19a094fea6f18a7896a13b86ace426d43beecfe438d3368f70b52f1eeb929cfe44e0fa9315301faaaf6cb74dd9025b1010f04d526c1acb4c294f0769702609dce8bb8b1cb8e5e5f49b869f94807f302f9eaea84e8bd476e50d68a997890343fe8ab3bf7d5bd2b3a5c9b8bcebcb6deb5392f85054a9bbdb56e6e6cbf7dcaaa66f9411c2d40f72d7f5ce0a1da87ca4bfecefceae3097bfaa81214cd4bb63c08d168c6d3be5dc69db087ac5765f4709750d03586c99abec2ce7860be68a7291af96686b43a0cc6d4b82c22dbf967ee093b30ea1ab70af1a42a0297b4895f6c14c073a3740d87c365806429b7c12821eb78bcbde20b0cf0861db2905495185a1170eaf4354ee1e463e41ff7001c18116697fa1bd03fc0655df3071c054fd54508b8acea108163bc803de795db289b12c52f8e9fa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码喵</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>同人</category>
      
      <category>汉化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>同人</tag>
      
      <tag>汉化</tag>
      
      <tag>龙珠</tag>
      
      <tag>孙悟空</tag>
      
      <tag>琪琪</tag>
      
      <tag>悟琪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Use arrays to implement stack</title>
    <link href="/2023/01/14/Use-arrays-to-implement-stack/"/>
    <url>/2023/01/14/Use-arrays-to-implement-stack/</url>
    
    <content type="html"><![CDATA[<p>栈：先入后出(FILO-First In Last Out)的有序链表。top–bottom, pop–push。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//use arrays to implement stack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//size of stack</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack;    <span class="hljs-comment">//data</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;   <span class="hljs-comment">//top of the stack, initiated as -1</span><br><br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        <span class="hljs-built_in">this</span>.stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//push</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack has been full. Can&#x27;t push new value in it.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++;<br>        stack[top] = value;<br>    &#125;<br><br>    <span class="hljs-comment">//pop</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;The stack has been empty. Can&#x27;t pop.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">//iterate (from top to bottom)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            System.out.println(<span class="hljs-string">&quot;stack[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + stack[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
      <category>Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Data Structures</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Use circular linked list to solve Josephus problem</title>
    <link href="/2023/01/11/Use-circular-linked-list-to-solve-Josephus-problem/"/>
    <url>/2023/01/11/Use-circular-linked-list-to-solve-Josephus-problem/</url>
    
    <content type="html"><![CDATA[<p>[cited from wikipedia]Josephus Problem: A number of people are standing in a circle waiting to be executed. Counting begins at a specified point in the circle and proceeds around the circle in a specified direction. After a specified number of people are skipped, the next person is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people, until only one person remains, and is freed.</p><p>The problem—given the number of people, starting point, direction, and number to be skipped—is to choose the position in the initial circle to avoid execution.</p><h1 id="Nodes-in-the-list-data-next"><a href="#Nodes-in-the-list-data-next" class="headerlink" title="Nodes in the list(data + next)"></a>Nodes in the list(data + next)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Circular-linked-list-and-the-solution"><a href="#Circular-linked-list-and-the-solution" class="headerlink" title="Circular linked list and the solution"></a>Circular linked list and the solution</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleSinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">//initiate the first point</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(-<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//add nodes to the list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(<span class="hljs-type">int</span> nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;nums should not be smaller than 1.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums; i++) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>                first = child;<br>                first.setNext(first);<br>                curNode = first;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curNode.setNext(child);<br>                curNode = child;<br>                child.setNext(first);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//iterate the list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//whether the list is empty</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;This list is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curNode</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The number of node is &quot;</span> + curNode.getNo());<br>            <span class="hljs-keyword">if</span> (curNode.getNext() == first) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curNode = curNode.getNext();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * solve Josephus problem by Circle Single Linked List</span><br><span class="hljs-comment">     * 1、创建helper指针，开始时指向环形链表最后一个结点</span><br><span class="hljs-comment">     * 2、开始count时，count m次即将first和helper同时移动m-1次</span><br><span class="hljs-comment">     * 3、然后将数到的结点出列</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> startNo  start from it</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> countNum every &#x27;countNum&#x27; get one node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sum      original number of nodes</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> startNo, <span class="hljs-type">int</span> countNum, <span class="hljs-type">int</span> sum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span> || startNo &lt; <span class="hljs-number">1</span> ||startNo&gt;sum)&#123;<br>            System.out.println(<span class="hljs-string">&quot;There&#x27;s something wrong with the list or the augments.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//create a helper and point it to the last node</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (helper.getNext() == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            helper = helper.getNext();<br>        &#125;<br><br>        <span class="hljs-comment">//move first and helper point to the startNo</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; startNo -<span class="hljs-number">1</span>; i++)&#123;<br>            first = first.getNext();<br>            helper = helper.getNext();<br>        &#125;<br><br>        <span class="hljs-comment">//start the count process</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//only one node left in the list</span><br>            <span class="hljs-keyword">if</span> (helper == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;countNum-<span class="hljs-number">1</span>; i++)&#123;<br>                first = first.getNext();<br>                helper = helper.getNext();<br>            &#125;<br><br>            <span class="hljs-comment">//get the &#x27;first&#x27; node</span><br>            System.out.println(<span class="hljs-string">&quot;Get the &#x27;&quot;</span> + first.getNo() +<span class="hljs-string">&quot;&#x27; node&quot;</span>);<br>            first = first.getNext();<br>            helper.setNext(first);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;The last node is &quot;</span> + first.getNo());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">CircleSinglyLinkedList</span> <span class="hljs-variable">circleSinglyLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleSinglyLinkedList</span>();<br>    circleSinglyLinkedList.addNode(<span class="hljs-number">5</span>);<br>    circleSinglyLinkedList.showList();<br><br>    <span class="hljs-comment">//test the Josephus</span><br>    circleSinglyLinkedList.josephus(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
      <category>Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Data Structures</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Singly Linked List</title>
    <link href="/2023/01/09/Singly-Linked-List/"/>
    <url>/2023/01/09/Singly-Linked-List/</url>
    
    <content type="html"><![CDATA[<p>单向链表——data＋next，只能从头向后遍历，头节点（head node）不存储信息。</p><h1 id="定义结点（node）"><a href="#定义结点（node）" class="headerlink" title="定义结点（node）"></a>定义结点（node）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickName;<br>    <span class="hljs-keyword">public</span> HeroNode next;<br><br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hNo, String hName, String hNickName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = hNo;<br>        <span class="hljs-built_in">this</span>.name = hName;<br>        <span class="hljs-built_in">this</span>.nickName = hNickName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickName + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定义单链表（Singly-Linked-List）"><a href="#定义单链表（Singly-Linked-List）" class="headerlink" title="定义单链表（Singly Linked List）"></a>定义单链表（Singly Linked List）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//singly linked list and the create and delete of it</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span> &#123;<br>    <span class="hljs-comment">//head node</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">HeroNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">//create</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//find the last node of the linked list</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            temp = temp.next;<br>        &#125;<br>        temp.next = heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">//another create</span><br>    <span class="hljs-comment">//add the new node to the right place by order</span><br>    <span class="hljs-comment">//if the no has existed, print error message</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode.no) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no) &#123;<br>                isExist = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isExist) &#123;<br>            System.out.println(<span class="hljs-string">&quot;This hero could not be added for the no of him(her) has existed.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;The no is &quot;</span> + heroNode.no + <span class="hljs-string">&quot;.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            heroNode.next = temp.next;<br>            temp.next = heroNode;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//print out</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;This linked list is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//delete</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//whether we found the node we need to delete</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//whether we reach the end of the nodelist</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no == no) &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            temp.next = temp.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;The node doesn&#x27;t exist.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="获取链表长度（get-the-length-of-the-List）"><a href="#获取链表长度（get-the-length-of-the-List）" class="headerlink" title="获取链表长度（get the length of the List）"></a>获取链表长度（get the length of the List）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get the number of node in a linked list</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head head node</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> number of node</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNodeLength</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">null</span>) &#123;<br>        length++;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找单链表中的倒数第k个结点（find-the-last-k-one-node-of-a-singly-linked-list）"><a href="#查找单链表中的倒数第k个结点（find-the-last-k-one-node-of-a-singly-linked-list）" class="headerlink" title="查找单链表中的倒数第k个结点（find the last k one node of a singly linked list）"></a>查找单链表中的倒数第k个结点（find the last k one node of a singly linked list）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查找单链表中倒数第k个结点</span><br><span class="hljs-comment">//1. 编写一个方法，接收head结点与index值</span><br><span class="hljs-comment">//2. index表示单链表中的倒数第k个结点</span><br><span class="hljs-comment">//3. 先把链表从头到尾遍历一遍，得到总长度size</span><br><span class="hljs-comment">//4. 从链表头开始遍历到第（size - index）个</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title function_">findLastIndexNode</span><span class="hljs-params">(HeroNode head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> getNodeLength(head);<br>    <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">0</span> || index &gt; size) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - index; i++) &#123;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反转单链表（reverse-a-singly-linked-list）"><a href="#反转单链表（reverse-a-singly-linked-list）" class="headerlink" title="反转单链表（reverse a singly linked list）"></a>反转单链表（reverse a singly linked list）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反转单链表</span><br><span class="hljs-comment"> * 1、遍历原链表</span><br><span class="hljs-comment"> * 2、将每个结点的下一个结点存储到next</span><br><span class="hljs-comment"> * 3、将处理中的结点的下一个结点，改为反转结点头后第一个结点</span><br><span class="hljs-comment"> * 4、将处理中的结点连接到反转结点头之后</span><br><span class="hljs-comment"> * 5、移动到next结点、继续处理上述步骤</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseList</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">reverseHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//遍历原链表，每遍历一个结点就将其取出、放在新链表reverseHead的最前端</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        next = cur.next;<br>        cur.next = reverseHead.next;<br>        reverseHead.next = cur;<br>        cur = next;<br>    &#125;<br>    head.next = reverseHead.next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="倒序打印单链表-print-a-singly-linked-list-from-last-one-to-the-first-one"><a href="#倒序打印单链表-print-a-singly-linked-list-from-last-one-to-the-first-one" class="headerlink" title="倒序打印单链表 (print a singly linked list from last one to the first one)"></a>倒序打印单链表 (print a singly linked list from last one to the first one)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 倒序打印单向链表</span><br><span class="hljs-comment"> * 使用栈（stack）实现</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;HeroNode&gt;();<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(cur);<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (stack.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        System.out.println(stack.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
      <category>Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Data Structures</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Using arrays to implement queues (JAVA)</title>
    <link href="/2022/12/28/Using-arrays-to-implement-queues/"/>
    <url>/2022/12/28/Using-arrays-to-implement-queues/</url>
    
    <content type="html"><![CDATA[<p>队列（Queue）：有序列表，可以用数组或链表实现。先入先出。</p><h1 id="数组模拟普通队列"><a href="#数组模拟普通队列" class="headerlink" title="数组模拟普通队列"></a>数组模拟普通队列</h1><p>front: point to the previous place of the first element.</p><p>rear: point to the last element.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueueDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试功能</span><br>        <span class="hljs-type">ArrayQueue</span> <span class="hljs-variable">arrayQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayQueue</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;s:show 显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e:exit 退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a:add 添加数据到队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g:get 从队列中取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h:head 从队列中读取头数据&quot;</span>);<br>            key = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                    arrayQueue.showQueue();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                    scanner.close();<br>                    System.out.println(<span class="hljs-string">&quot;Exit the program.&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Please enter a number:&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    arrayQueue.addQueue(value);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> arrayQueue.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;You get the value: &quot;</span> + v);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> arrayQueue.peed();<br>                        System.out.println(<span class="hljs-string">&quot;The head of queue is &quot;</span> + result);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用数组模拟普通队列</span><br>    <span class="hljs-comment">//并未模拟环形队列，因此此数组队列空间只能利用一次</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//数组的最大容量</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;  <span class="hljs-comment">//队列头</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;   <span class="hljs-comment">//队列尾</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr;  <span class="hljs-comment">//用于存储数据，模拟队列</span><br><br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span> &#123;<br>            maxSize = arrMaxSize;<br>            arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>            front = -<span class="hljs-number">1</span>;<br>            rear = -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否已满</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> rear == maxSize - <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否为空</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> front == rear;<br>        &#125;<br><br>        <span class="hljs-comment">//添加数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isFull()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is full and you cannot add data in it.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            rear++;<br>            arr[rear] = n;<br>        &#125;<br><br>        <span class="hljs-comment">//出队列</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty. You cannot get data from it.&quot;</span>);<br>            &#125;<br>            front++;<br>            <span class="hljs-keyword">return</span> arr[front];<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列的所有数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列头数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peed</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr[front + <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组模拟环形队列（Circular-Queue）"><a href="#数组模拟环形队列（Circular-Queue）" class="headerlink" title="数组模拟环形队列（Circular Queue）"></a>数组模拟环形队列（Circular Queue）</h1><p>front: point to the first element. Initiated as 0.</p><p>rear: point to the place after the last element. Initiated as 0.</p><p><strong>isFull: (rear + 1) % maxSize &#x3D;&#x3D; front</strong></p><p><strong>isEmpty: rear &#x3D;&#x3D; front</strong></p><p><strong>size: (rear - front + maxSize) % maxSize</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleArrayQueueDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试功能</span><br>        <span class="hljs-type">circleArray</span> <span class="hljs-variable">circleArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">circleArray</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">char</span> key;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;s:show 显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e:exit 退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a:add 添加数据到队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g:get 从队列中取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h:head 从队列中读取头数据&quot;</span>);<br>            key = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                    circleArray.showQueue();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                    scanner.close();<br>                    System.out.println(<span class="hljs-string">&quot;Exit the program.&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Please enter a number:&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    circleArray.addQueue(value);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> circleArray.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;You get the value: &quot;</span> + v);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> circleArray.peed();<br>                        System.out.println(<span class="hljs-string">&quot;The head of queue is &quot;</span> + result);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//数组模拟环形队列，可重复使用空间</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">circleArray</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//数组的最大容量</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;  <span class="hljs-comment">//队列头</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;   <span class="hljs-comment">//队列尾</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr;  <span class="hljs-comment">//用于存储数据，模拟队列</span><br><br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">circleArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span> &#123;<br>            maxSize = arrMaxSize;<br>            arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>            front = <span class="hljs-number">0</span>;<br>            rear = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否已满</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否为空</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> front == rear;<br>        &#125;<br><br>        <span class="hljs-comment">//添加数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isFull()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is full and you cannot add data in it.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            arr[rear] = n;<br>            rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>        &#125;<br><br>        <span class="hljs-comment">//出队列</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty. You cannot get data from it.&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> arr[front];<br>            front = (front + <span class="hljs-number">1</span>) % maxSize;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br><br>        <span class="hljs-comment">//求有效数据个数</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> (rear - front + maxSize) % maxSize;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列的所有数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; front + size(); i++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列头数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peed</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr[front];<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
      <category>Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Data Structures</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Conversion between sparse arrays and two-dimensional arrays using Java</title>
    <link href="/2022/12/27/Conversion-between-sparse-arrays-and-two-dimensional-arrays-using-Java/"/>
    <url>/2022/12/27/Conversion-between-sparse-arrays-and-two-dimensional-arrays-using-Java/</url>
    
    <content type="html"><![CDATA[<p>稀疏数组（sparse array）: 非线性结构。当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。第一行保存行数、列数、数据总数。</p><h6 id="二维数组转稀疏数组思路："><a href="#二维数组转稀疏数组思路：" class="headerlink" title="二维数组转稀疏数组思路："></a>二维数组转稀疏数组思路：</h6><ol><li>遍历原始数组，得到数据总数（sum）</li><li>创建新稀疏数组’int [sum+1] [3]’</li><li>再次遍历，将有效数据存入稀疏数组中</li></ol><h6 id="稀疏数组转二维数组思路："><a href="#稀疏数组转二维数组思路：" class="headerlink" title="稀疏数组转二维数组思路："></a>稀疏数组转二维数组思路：</h6><ol><li><p>根据稀疏数组第一行的数据，创建原始二维数组</p></li><li><p>根据稀疏数组后面几行的数据，将数据赋予原始二维数组。</p></li></ol><h5 id="例：在一个11-11的棋盘上有两个棋子，记录这两个棋子的信息。"><a href="#例：在一个11-11的棋盘上有两个棋子，记录这两个棋子的信息。" class="headerlink" title="例：在一个11*11的棋盘上有两个棋子，记录这两个棋子的信息。"></a>例：在一个11*11的棋盘上有两个棋子，记录这两个棋子的信息。</h5><h6 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  原始二维数组，0代表无棋子，1代表黑棋，2代表白棋</span><br>        <span class="hljs-type">int</span>[][] chessArrayOri = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        chessArrayOri[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        chessArrayOri[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//打印原始二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArrayOri) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br><span class="hljs-comment">//  二维数组转稀疏数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArrayOri.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArrayOri.length; j++)&#123;<br>                <span class="hljs-keyword">if</span> (chessArrayOri[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-comment">//统计数据总数</span><br>    <span class="hljs-type">int</span>[][] sparseArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = chessArrayOri.length;<br>        sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = chessArrayOri[<span class="hljs-number">0</span>].length;<br>        sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<span class="hljs-comment">//构建稀疏数组第一行信息</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArrayOri.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArrayOri.length; j++)&#123;<br>                <span class="hljs-keyword">if</span> (chessArrayOri[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparseArray[count][<span class="hljs-number">0</span>] = i;<br>                    sparseArray[count][<span class="hljs-number">1</span>] = j;<br>                    sparseArray[count][<span class="hljs-number">2</span>] = chessArrayOri[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-comment">//将数据存入稀疏数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : sparseArray) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<span class="hljs-comment">//打印生成的稀疏数组</span><br><br><span class="hljs-comment">// 稀疏数组转二维数组</span><br>        <span class="hljs-type">int</span>[][] chessArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sparseArray.length; i++)&#123;<br>            chessArr[sparseArray[i][<span class="hljs-number">0</span>]][sparseArray[i][<span class="hljs-number">1</span>]] = sparseArray[i][<span class="hljs-number">2</span>];<br>        &#125;<span class="hljs-comment">//生成二维数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;==========================================&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArr) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<span class="hljs-comment">//打印还原的二维数组</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
      <category>Data Structures</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>Data Structures</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【221102】杂感</title>
    <link href="/2022/11/02/%E3%80%90221102%E3%80%91%E6%9D%82%E6%84%9F/"/>
    <url>/2022/11/02/%E3%80%90221102%E3%80%91%E6%9D%82%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误了喵" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3da6e1cee0ece4b920c90b2fe3cab9f96e11d973221881ed4975b7944db745f3">06423e480afdff19d80aaca02b9d701a5240975623adc9f7a645b7a39a16e08bc19fe3aa9f7a458a581685b49728ac5abaae0185c4888f4e05d2a27e9aa9e5b4ae977fa0dabfea445b72d78d21531c85bf29cc8494e98bb3dc9fd6d8b4ae383564372ae40bf382e38ec2f5247fa11f8831dd217788c16ac4af5c5fa89ec357dd9a04a25e3516e76cdec5a675730062ee512e8eed573c1b64bf859c3768e5150ce365fcddcf484afd6f37673fd2b1edafa49953ec2dacbc3c1b75c0c4d256b9c6769e96608d4f2f7377b0d50ad9fb55c177ee52c484c0bf1c72acf6d4fa27dff52c5a947039f09d13214381782a1ea0dd3a7be210adf3972806696d7a83595646b3b118bf759d40533c7da408a3c0d1157849fb81159d3df55ddf1b9120120457adfb2e41ca583c6d68fbd834db92186192b8038bf393226aa6798cc2e6c04c9e133410dde4d874dd1428c1f330ee2974aa78e91f58248191593e58e4d2c50709728497715d2e963e1acd811ec7e3b20806c12da9171b5f4b0c9b5c9771b5949d0cf69daf174c958f04891b50af275bc3d4114c57445908edfcd396c1bec84077861dcb3b7c162ad05a8a485c8c2ec934b0188da0d70427e637d3d96241894613b3fddb5b6e84feaf10562a3146f1c4456655fc59984047fbf333a17d3e98c4a9bbbfe90c550103728d62caa46ca50d16d3a0be95195eac5275e63b4faa9fab673aa3624457a04935e34b60a5f7ef42383043ecfdcb32e35f7724c015f1eb2732a4e2dc7bae59fa253ad794b12b016854fc2eb42237359a4263dffd3d9a4ae2ff670a3d9e9e665b91b98c15b1239f5abab1cea18c88074ce79f0b1fe860e4ce01180c04881017facd2ec6dcb1ce4a94f39c3380ed35e91ef97209d6a4ed19f6d8437c8e4518913b3a583e7921e8f9ec500b375e5d27a9302c84f0829306146a5097fbd90de2706b806380c2b393f56f095f6d101c383e0350b2f3cbb7669b71e257f6060d9f3704ffb3138d72e0c8c10cc03848fdaebedd4662b898d2f6e507ac1e88b46678aa2d17314afe5f7f72a8b9719a2b3f996250fc3b33d1289c6eb85b08c1d74ca02e0b48808500aa33c264e410b0fa15502faba0e4ac1ba29eb2f3cee6c43667ccfaf6d4a30f0e90b4af84c762d45cda3245e01bafdf5e8d33c19ab2496c1b04eeba8bc8f37ee50b8d9b1d498ea61a09abf360c48973ce0defda6f7105f689e0edf68171bf41faf94aaf3f3e843d3f392e8d50a9805a6bab99cd85472c53c708191e0513c72b2cf1a795c9ad35f63a78f04df9ef77a952b1dce9307ea9b64aebfa9737518a27bf755c24dff79e4ef96af9108fccc58a977fd5e6faabfa6a9be00b4e3ef9edb92a226eefcbd90a6340c4ad7a03e49a88cbcf4780da49658747e804e35c82f9ff6ef95d0d937cf02185d8d933c3e108354ab65b7c7026fb08846eb6d4543fe692831e95fbc1cd5f666a31180cfb15ddbfeeb7d00cc189ee70c5717767491793f13065a97da0b54e6088e115f03e9e65f167f26470100377aef4db426bea851fcae2369a0d347dee7aec6bc9796e07a623536169bb74a2b4a266e2bc427c0e2d2a3ef054c63340d5eb738f5b48fff5cde4fcc9e97ccb26de529c628fbeb2c8828cf98f700cebf3fa717288627c6dd6cc1a3c4f6d7511e94a95d8fa06ac92ec8cef1efb84c5c7d6fdd377bd4155040786af801c4f75331c09cf6fbba086c8d5b4cf15e52466406f9d02b2cbb458c2a6824935cf3fd575e96ff1888909cbcbaddd0482d591928be5e322bed1dbcac621f0bcd8a134d69e69cfefd5e553000eed0c6de4ae3666863dea4490685f9211421b5b2bb3d0b40e027bf6000340b0b614e1e70ade362c7dc53294eb0b18aadaa219122269ab00c08d3b77a38f05decc09ebdb2a2de2ef67cca1c14179110b54feb16cd6aef47e12325c21bd63be3776541582ddea6c213c183f33e739b224c4df075ffeca09d8a39a96b178be04ad87812475cbfeb1d0f4821692cbf6b47f826a4ac5dd1597908f4ad59ef0d3a4f2ec208ce892607b2356328299fb7a8023ca1750af46fc08081359d6c71eea7ee6724c1fb5afeb70afc8d51d2981f2215a927a8d0e9fc1d5bd7ae5be4035eaf8b561ca2f090cc04bfe780874e907e73c7a1e6723b177f3fdb359081d45947e142469217dffcddbc501174c7891d2b1052138e4f22e031cadf4e12efacfc640220f10fc2a7f84ee104032f7435f12fe71c25a0e9840941b882f3bb3bdd748343c23b48b7de6baddec199f770aa309747a593e0a8c1879647cd57b31d560ec6a73e305612e6f729d6c68bd6591952d82680c33a0d15966e4587c676364b9d7aa4e0b656b690b2fc08b9c620e2d296a7047309e6d0292bf77ff9279d9725479610f6f606026cdb1472db446caa1405c54c6d758ea35c989c6b780ec26833ea5f8d14651f794687a14589c006a893cf842eed16d104bf66e816c22d72d0d404371750a0578f1a654b6bb2eb6a2464d40e4981db002f11e881a5cda5ac2463bc45a563095b1a0c3b8a84718a4ee299e5dbc0d1fc678e047e878d3b57bfa11b15f31ed3e0230fc6081c09bc0268ae905522f7685eace7809d22a5f073f58c04d2ccd6af5ad87503ccb291bb3ad83e23f218e60a3eb8512c0af52499bafc427a9e440569595803e6d61bfc2e524404cb511a49fd435b0a331f2a85afd2e5a8311a97a8c7b19fada66c0282424f6c88c4f662a7d0ddd82b3138d6a912f5990e4288a45d5c2b02e177e71a6d89b32a575e525783f25fdb1ed6cbb1495e4ce22177f2502dd913de27001e10be6e50cdb546f31039b0ef6c2266d2abebe77b3529c83a287c29648418b60ab3d7e1d87506a9a8be56fa49568620d295300c54882b3b78b5aaa8ed3b29c59a4203099df045191e0644f407e395fb76c8aed63a6935c4c74a8929c512115313272ee23ee9681247c0b39da418ed9a52d91ad8e67e54cf26d841f0b1082885dc598a38a4512bbe1d42539cd21087a0752b6fb669f6ae388b1afa47e991736bdeb9de0ab08eccfe56e4439088cf8609dfa57f29784914a5f40b613e4fb8704616cc6bafe375b00bbbb54bcd1da6a67cecdc30cb6ffcbac846960bdb42c10ba97a54ec8e7fd05e56d29f84a9781627cf527826f1e76dd30fdb89a2f00ae7543652de61a68799a9ce58e33cd6c0d3e6bb9d93aaa952183838102f9fe3be26b3bca64ee5d98bc96a3224fcfdb42c6e883ff3f88a41e7fa0574a38720b39c38823597112a23cc4ffe604441b24b2ab4d7f8064c24a66f5ac350868318a129012d08cedfa197c2893d19fe8c6d0f8103cb42c074f75eec37a1479e7f39e283904a4bc431cf52f5d3422185b405becc8d3375587f57c3b4c48be9a08b0198cdb2ddb8049847980269ecd6366dc6dd487ad5321b5dfaae4185587905c98f296790d0c855e3cc97509a09aa7fa9b98744b5747e80dbf65506fb9e922fbf43110a662048387425c155c6b1420e28cf154779bacdef3c7f077f4cced1fd8e5bc0149ae0f157665a9577817e253b780157c527b16d50acbf0808b9080efd21250663bfb0b1ee0efbfc9c11cb6b8c771239e6e567fa131f5b4ef6da7bb4f6bf97c1d125c963c9d9fb8c90084774e73684979378f1ed70b837cee682ceff6ee5d7f317b7145bd327257bb3fc12b8b4a6db3d604d53d4d5ca2670eae9217222933426ac33bf8e4853d8f5aa92f3d68b130d45a68ca0967d22883dbe4c9c732b8b7dbfcd030b5e36d8e5e3fd2f0140ff5f09adcf25f4ceebfd6f608734470b64deac29fd8ba4be87a4b725c9be1f3c93e49742ce510a9292d941c420c9ac1351d5858b4e850550a9509e977840364019a11cd2a681d3c9a407a8680a47053df9031d40eec4b56df2dea6fb26e896ecf0b03c2999081db2decf985f9ed83ad3dad7ac2828a18aef1211201237e7c811409fa8199137670d3b572e121e562709a631b1ec9bc3b003408ad5fc1fce0cf0d56f244449fcc3c9e5757482206189a4fca425e0ab7580d7e1c9e2f2d559126b95bdc46a5f1a5f7b7693c8c476676844553931f32a3dd14566c713ac8e4ab2370f0d3fdfc0028402b8118e031d119a22bd4deeedee001c0abb6c5a67ec249f7fdc383c6f695f467edc4f168e4cc9a370bf3050bad274e9b82b6091efea42d13bcaa0452d3cfb3933a38431920dd82d78deff34980529d951cdb5e3f4c777d3f28306bc9c22b836b152213499192987a55171ef707c7a34bfa22c7b14594b40e783ea46af25a1a6076167562c133a1f1f0a7b12013e4d408d6f34de7be6edfd66fc3bd9ed896fbbdb71ae85972b2342486534c2bfbf695240dabad4dfb247333a9521b5fd2826a21538cc912247cc948fc4d8ad7d80101a33f46e87cf0e6c1c756daa9108bee5d26ba8aae27bb1072588b55c16401f28f620c8559760a7f2f9f95d240742a791234fa61aa37b978c80cecaa875b6a5e05869c9b03dd781485553da60c1986fdb65641885f231ac51acfea7ae62ad88fa902ed4b7dbdc1a3244c75d58197292310493e3a3af7d5d8a777abf5b0463549630bf5d7a0b19aef9b4b36900f1337136272bc35fb978a075da0ce78fb4bbe96776bcb409a07027795cd0b8430e36869f11eb176c14a3cbe9b21ac48b195d9188fa05534c2f9ab12a71b0d55c8109e317d417b50082f51728e8eb312df4e9f2aa982d516becc9b5313a523c5c08e8d4e5ff59f435dfc7ec1726bd50d2466f71205ad94107cf5329e01badd89424cad5ae78cbbc4a7428821d7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码喵</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>杂感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL Workbench在使用时出现‘Could not acquire management access for administration’的错误</title>
    <link href="/2022/09/21/MySQL-Workbench%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%98Could-not-acquire-management-access-for-administration%E2%80%99%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <url>/2022/09/21/MySQL-Workbench%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%98Could-not-acquire-management-access-for-administration%E2%80%99%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>前几天在新电脑上安装了MySQL后，一直没有测试过功能，今天下午上pratical时才发现能连上server却无法访问administration权限。</p><blockquote><p>Could not acquire management access for administration</p><p>RuntimeError: Target host is configured as Windows, but seems to be a different OS. Please review the connection settings.</p></blockquote><p>向tutor请教也只是让我重装正确版本的MySQL。于是自己在网上搜了一圈，尝试更改了很多设置最终发现，是win11中文操作系统的编码问题，似乎是MySQL从8.0.25版本开始才出现的问题。</p><p>解决方法：</p><ol><li>设置→时间和语言→相关设置→管理语言设置</li><li>弹出的区域窗口中→管理标签页→更改系统区域设置</li><li>win11直接勾选上“Beta版：使用Unicode UTF-8 提供全球语言支持”，没有这个选项的话就把系统区域设成英文区吧。</li></ol><p>后记：当然如果我当初要是不偷懒把系统早点改成英文版就没这些事了呃，浪费了两个小时一点一点改系统设置环境变量真是要了命，最终居然只是因为中文编码问题……</p>]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Second Test</title>
    <link href="/2022/09/21/My-Second-Test/"/>
    <url>/2022/09/21/My-Second-Test/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误了喵" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="afc8c590a60977c1c6792077220c8eb370a19825be9cbeb3f46ff33e9010df8c">4630436162ade97ba2718b7d0c4b3b63b2634c936bf548cbdc9e744d48770c30cd443aa754143ca051602956a1a1c1d4d957ee0606d3166a5ac7dce9c2b144b4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码喵</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My First Test</title>
    <link href="/2022/09/21/My-First-Test/"/>
    <url>/2022/09/21/My-First-Test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/20/hello-world/"/>
    <url>/2022/09/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
