<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Search Algorithm - Interpolation Search</title>
      <link href="/2023/09/15/Search-Algorithm-Interpolation-Search/"/>
      <url>/2023/09/15/Search-Algorithm-Interpolation-Search/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Interpolation Search is an efficient searching algorithm used to find a specific element within a sorted collection, such as an array. It estimates the likely position of the target element based on its value relative to the minimum and maximum values in the array. By using this estimation, it reduces the search space significantly with each iteration, resulting in faster search times compared to linear search algorithms. However, it requires that the data be uniformly distributed for optimal performance.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterpolationSearch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create a sorted integer array to search within</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-comment">// Call the interpolationSearch function to search for the target element (2) in the array</span><br>        System.out.println(interpolationSearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Interpolation Search algorithm to find the target element in a sorted array.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr    The sorted array to search within</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left   The left pointer (start index of the search range)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right  The right pointer (end index of the search range)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target The element to search for</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The index of the target element if found, or -1 if not found</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interpolationSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">// Check for invalid search conditions (base cases)</span><br>        <span class="hljs-keyword">if</span> (left &gt; right || target &lt; arr[<span class="hljs-number">0</span>] || target &gt; arr[arr.length - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// Target element not found</span><br>        &#125;<br><br>        <span class="hljs-comment">// Calculate the midpoint index using the interpolation formula</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + ((target - arr[left]) * (right - left)) / (arr[right] - arr[left]);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> arr[mid];<br><br>        <span class="hljs-keyword">if</span> (midVal &gt; target) &#123;<br>            <span class="hljs-comment">// If the middle value is greater, search the left half of the array</span><br>            <span class="hljs-keyword">return</span> interpolationSearch(arr, left, mid - <span class="hljs-number">1</span>, target);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midVal &lt; target) &#123;<br>            <span class="hljs-comment">// If the middle value is smaller, search the right half of the array</span><br>            <span class="hljs-keyword">return</span> interpolationSearch(arr, mid + <span class="hljs-number">1</span>, right, target);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// If the target is equal to the middle value, return its index</span><br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search Algorithm - Binary Search Enhanced</title>
      <link href="/2023/09/15/Search-Algorithm-Binary-Search-Enhanced/"/>
      <url>/2023/09/15/Search-Algorithm-Binary-Search-Enhanced/</url>
      
        <content type="html"><![CDATA[<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>In the previous binary search code, we could only find the index of a single target. In this article, we will enhance this function to make it capable of finding all matching result indices.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Recursive binary search algorithm to find the multiple target element in a sorted array.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr    The sorted array to search within</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> left   The left pointer (start index of the search range)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> right  The right pointer (end index of the search range)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> target The element to search for</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The index of the target element if found, or -1 if not found</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">binarySearchImproved</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> target)</span> &#123;<br>    <span class="hljs-comment">// Calculate the middle index and value</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> arr[mid];<br><br>    <span class="hljs-comment">// Check if the left pointer has crossed the right pointer (base case for termination)</span><br>    <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// Target element not found</span><br>    &#125;<br><br>    <span class="hljs-comment">// Compare the target with the middle value</span><br>    <span class="hljs-keyword">if</span> (target &gt; midVal) &#123;<br>        <span class="hljs-comment">// If the target is greater, search the right half of the array</span><br>        <span class="hljs-keyword">return</span> binarySearchImproved(arr, mid + <span class="hljs-number">1</span>, right, target);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; midVal) &#123;<br>        <span class="hljs-comment">// If the target is smaller, search the left half of the array</span><br>        <span class="hljs-keyword">return</span> binarySearchImproved(arr, left, mid - <span class="hljs-number">1</span>, target);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Initialize a list to store indices of matching target elements</span><br>        ArrayList&lt;Integer&gt; resultIndexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// Search for matching elements to the left of the mid-index</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> mid - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || arr[temp] != target) &#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// Exit the loop if no more matching elements to the left</span><br>            &#125;<br>            resultIndexList.add(temp);<br>            temp--;<br>        &#125;<br><br>        <span class="hljs-comment">// Add the current mid-index to the list</span><br>        resultIndexList.add(mid);<br><br>        <span class="hljs-comment">// Search for matching elements to the right of the mid-index</span><br>        temp = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp &gt;= arr.length || arr[temp] != target) &#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// Exit the loop if no more matching elements to the right</span><br>            &#125;<br>            resultIndexList.add(temp);<br>            temp++;<br>        &#125;<br><br>        <span class="hljs-comment">// Return the list of indices where the target element was found</span><br>        <span class="hljs-keyword">return</span> resultIndexList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search Algorithm - Sequential Search And Binary Search</title>
      <link href="/2023/09/13/Search-Algorithm-Sequential-Search-And-Binary-Search/"/>
      <url>/2023/09/13/Search-Algorithm-Sequential-Search-And-Binary-Search/</url>
      
        <content type="html"><![CDATA[<h1 id="Sequential-Search"><a href="#Sequential-Search" class="headerlink" title="Sequential Search"></a>Sequential Search</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Sequential Search, also known as Linear Search, is a straightforward searching algorithm used to find a specific element within a collection of elements, such as an array or a list. It works by examining each element one by one, starting from the beginning, until either the target element is found or the entire collection has been traversed. Sequential Search is easy to understand and implement but has <strong>a linear time complexity of O(n) in the worst case</strong>, making it less efficient for large datasets compared to more advanced search algorithms like Binary Search for sorted arrays.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeqSearch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create an integer array to search within</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">77</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">56</span>&#125;;<br><br>        <span class="hljs-comment">// Define the target element to search for</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><br>        <span class="hljs-comment">// Call the seqSearch function to find the target element in the array</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> seqSearch(arr, target);<br><br>        <span class="hljs-comment">// Print the index where the target element was found (or -1 if not found)</span><br>        System.out.println(index);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sequential search algorithm to find the target element in an array.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr    The array to search within</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target The element to search for</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The index of the target element if found, or -1 if not found</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">seqSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">// Iterate through the array</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">// Check if the current element is equal to the target</span><br>            <span class="hljs-keyword">if</span> (arr[i] == target) &#123;<br>                <span class="hljs-comment">// Return the index where the target element was found</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// If the target element is not found, return -1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h1><h2 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h2><p>Binary Search is a highly efficient search algorithm used to find a specific element within a sorted collection of elements, such as an array. It works by repeatedly dividing the search interval in half and comparing the middle element with the target element. If the middle element matches the target, the search is successful. If the target is smaller, the search continues in the left half of the interval; if it’s larger, the search continues in the right half. Binary Search has <strong>a time complexity of O(log n) in the worst case</strong>, making it significantly faster than linear search algorithms for large datasets, but it requires that the data be sorted prior to searching.</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearch</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create a sorted integer array to search within</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-comment">// Call the binarySearch function to search for the target element (4) in the array</span><br>        System.out.println(binarySearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">4</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Recursive binary search algorithm to find the target element in a sorted array.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr    The sorted array to search within</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left   The left pointer (start index of the search range)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right  The right pointer (end index of the search range)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target The element to search for</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The index of the target element if found, or -1 if not found</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">// Calculate the middle index and value</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">midVal</span> <span class="hljs-operator">=</span> arr[mid];<br><br>        <span class="hljs-comment">// Check if the left pointer has crossed the right pointer (base case for termination)</span><br>        <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// Target element not found</span><br>        &#125;<br><br>        <span class="hljs-comment">// Compare the target with the middle value</span><br>        <span class="hljs-keyword">if</span> (target &gt; midVal) &#123;<br>            <span class="hljs-comment">// If the target is greater, search the right half of the array</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, right, target);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; midVal) &#123;<br>            <span class="hljs-comment">// If the target is smaller, search the left half of the array</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, left, mid - <span class="hljs-number">1</span>, target);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// If the target is equal to the middle value, return its index</span><br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Radix Sort</title>
      <link href="/2023/09/12/Sort-Algorithm-Radix-Sort/"/>
      <url>/2023/09/12/Sort-Algorithm-Radix-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Radix Sort is a non-comparative sorting algorithm that processes the elements of an array by grouping them based on individual digits or place values. It starts by sorting elements based on the least significant digit and gradually moves to the most significant digit. Radix Sort is efficient for integers or fixed-length strings and has a time complexity of O(nk) in the worst case, where n is the number of elements and k is the number of digits or the maximum length of the strings. It’s often used for sorting numbers in base 10 or other fixed-radix representations.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RadixSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create an integer array to be sorted</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">53</span>, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>, <span class="hljs-number">58</span>, <span class="hljs-number">962</span>, <span class="hljs-number">14</span>, <span class="hljs-number">215</span>&#125;;<br><br>        <span class="hljs-comment">// Call the radixSort function to sort the array</span><br>        radixSort(arr);<br><br>        <span class="hljs-comment">// Print the sorted array</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Radix Sort algorithm to sort an integer array.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr The array to be sorted</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">// Find the maximum number in the array to determine the maximum number of digits</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> (max + <span class="hljs-string">&quot;&quot;</span>).length();<br><br>        <span class="hljs-comment">// Create buckets for each digit (0-9)</span><br>        <span class="hljs-type">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][arr.length];<br><br>        <span class="hljs-comment">// Keep track of the number of elements in each bucket</span><br>        <span class="hljs-type">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-comment">// Iterate through each digit place (from least significant to most significant)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// Distribute elements into buckets based on the current digit</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : arr) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> value / n % <span class="hljs-number">10</span>;<br>                bucket[digitOfElement][bucketElementCounts[digitOfElement]] = value;<br>                bucketElementCounts[digitOfElement]++;<br>            &#125;<br><br>            <span class="hljs-comment">// Reconstruct the array by taking elements from buckets</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bucketElementCounts.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (bucketElementCounts[j] != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketElementCounts[j]; k++) &#123;<br>                        arr[index] = bucket[j][k];<br>                        index++;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// Reset the bucket element count</span><br>                bucketElementCounts[j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Merge Sort</title>
      <link href="/2023/09/12/Sort-Algorithm-Merge-Sort/"/>
      <url>/2023/09/12/Sort-Algorithm-Merge-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Merge Sort is a comparison-based, divide-and-conquer sorting algorithm known for its stability and efficiency. It works by dividing the unsorted array into smaller subarrays until each subarray contains only one element. It then merges these subarrays back together while sorting them, resulting in a sorted array. Merge Sort has a consistent time complexity of O(n log n), making it a reliable choice for sorting large datasets.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MergeSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create an integer array to be sorted</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">// Create a temporary array to assist in the sorting process</span><br>        <span class="hljs-type">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br><br>        <span class="hljs-comment">// Call the mergeSort function to sort the array</span><br>        mergeSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, temp);<br><br>        <span class="hljs-comment">// Print the sorted array</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Recursive merge sort function.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr   The array to be sorted</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left  The left index of the current subarray</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right The right index of the current subarray</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp  A temporary array for merging</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// Recursively sort the left and right halves</span><br>            mergeSort(arr, left, mid, temp);<br>            mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br>            <span class="hljs-comment">// Merge the sorted halves</span><br>            merge(arr, left, mid, right, temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Merge two subarrays into a sorted array.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr   The array to be sorted</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left  Pointer to the left of the subarray</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mid   Pointer to the middle of the subarray</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right Pointer to the right of the subarray</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp  Temporary array for merging</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>            <span class="hljs-comment">// Compare elements from both halves and merge them in sorted order</span><br>            <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j]) &#123;<br>                temp[t] = arr[i];<br>                t++;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[t] = arr[j];<br>                t++;<br>                j++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Copy any remaining elements from the left half</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>            temp[t] = arr[i];<br>            t++;<br>            i++;<br>        &#125;<br><br>        <span class="hljs-comment">// Copy any remaining elements from the right half</span><br>        <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>            temp[t] = arr[j];<br>            t++;<br>            j++;<br>        &#125;<br><br>        t = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempLeft</span> <span class="hljs-operator">=</span> left;<br><br>        <span class="hljs-comment">// Copy the sorted values from the temporary array back into the original array</span><br>        <span class="hljs-keyword">while</span> (tempLeft &lt;= right) &#123;<br>            arr[tempLeft] = temp[t];<br>            t++;<br>            tempLeft++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Quick Sort</title>
      <link href="/2023/09/11/Sort-Algorithm-Quick-Sort/"/>
      <url>/2023/09/11/Sort-Algorithm-Quick-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Quick Sort is a highly efficient, comparison-based sorting algorithm that uses a divide-and-conquer strategy. It selects a pivot element from the array and partitions the elements into two subarrays: elements less than the pivot and elements greater than the pivot. It then recursively sorts these subarrays, providing an average-case time complexity of O(n log n), making it one of the fastest sorting algorithms in practice.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create an integer array</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">98</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">9</span>, <span class="hljs-number">132</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">7</span>, <span class="hljs-number">0</span>&#125;;<br><br>        <span class="hljs-comment">// Call the quickSort function to sort the array</span><br>        quickSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// Print the sorted array</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// Quick Sort function</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-comment">// Define pointers and choose a pivot element</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> left;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> right;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> arr[(left + right) / <span class="hljs-number">2</span>];<br><br>        <span class="hljs-type">int</span> temp;<br><br>        <span class="hljs-comment">// Partitioning loop</span><br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-comment">// Find elements on the left that are greater than the pivot</span><br>            <span class="hljs-keyword">while</span> (arr[l] &lt; pivot) &#123;<br>                l++;<br>            &#125;<br>            <span class="hljs-comment">// Find elements on the right that are smaller than the pivot</span><br>            <span class="hljs-keyword">while</span> (arr[r] &gt; pivot) &#123;<br>                r--;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (l &lt;= r) &#123;<br>                <span class="hljs-comment">// Swap the elements at l and r</span><br>                temp = arr[r];<br>                arr[r] = arr[l];<br>                arr[l] = temp;<br><br>                <span class="hljs-comment">// Move the pointers</span><br>                l++;<br>                r--;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Recursively sort the left and right subarrays</span><br>        <span class="hljs-keyword">if</span> (left &lt; r) &#123;<br>            quickSort(arr, left, r);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (right &gt; l) &#123;<br>            quickSort(arr, l, right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Shell Sort</title>
      <link href="/2023/09/05/Sort-Algorithm-Shell-Sort/"/>
      <url>/2023/09/05/Sort-Algorithm-Shell-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Shell sort is an in-place sorting algorithm that improves upon the insertion sort by dividing the array into smaller subarrays called “shells.” It starts by sorting pairs of elements that are distant from each other by a specified gap. It then gradually reduces this gap until it becomes 1, effectively performing a final insertion sort on the nearly sorted array.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="Exchange-Swapping-Method"><a href="#Exchange-Swapping-Method" class="headerlink" title="Exchange (Swapping) Method"></a>Exchange (Swapping) Method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSortExchange</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-type">int</span> temp;<br><br>    <span class="hljs-comment">// Start with a gap, and gradually reduce it</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// Iterate through the array</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">// Compare and swap elements with a gap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;<br>                    temp = arr[j];<br>                    arr[j] = arr[j + gap];<br>                    arr[j + gap] = temp;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Shifting-Insertion-Method"><a href="#Shifting-Insertion-Method" class="headerlink" title="Shifting (Insertion) Method"></a>Shifting (Insertion) Method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSortShift</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-comment">// Loop through different gap sizes, starting with half the array length</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// Iterate through the array elements</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;                  <span class="hljs-comment">// Store the current element&#x27;s index</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];          <span class="hljs-comment">// Store the current element&#x27;s value</span><br><br>            <span class="hljs-comment">// Compare the current element with elements at a specific gap</span><br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;<br>                <span class="hljs-comment">// Shift elements to the right within the gap until the correct position is found</span><br>                <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;<br>                    arr[j] = arr[j - gap];<br>                    j -= gap;<br>                &#125;<br>                arr[j] = temp;  <span class="hljs-comment">// Place the current element in its correct position</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="main-method-for-testing"><a href="#main-method-for-testing" class="headerlink" title="main method (for testing)"></a>main method (for testing)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// Create an array of integers</span><br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">98</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">58</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">65</span>&#125;;<br>    <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">98</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">58</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">65</span>&#125;;<br><br>    <span class="hljs-comment">// Call the function to sort the array</span><br>    shellSortExchange(arr);<br>    shellSortShift(arr1);<br><br>    <span class="hljs-comment">// Print the sorted array</span><br>    System.out.println(<span class="hljs-string">&quot;Exchange method: &quot;</span> + Arrays.toString(arr));<br>    System.out.println(<span class="hljs-string">&quot;Shift method: &quot;</span> + Arrays.toString(arr));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Insertion Sort</title>
      <link href="/2023/09/05/Sort-Algorithm-Insertion-Sort/"/>
      <url>/2023/09/05/Sort-Algorithm-Insertion-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Insertion sort is a straightforward comparison-based sorting algorithm that builds the final sorted array one element at a time. It iterates through the input array, taking each element and inserting it into its correct position within the already sorted portion of the array. This sorting method has an average and worst-case time complexity of O(n^2), making it less efficient than more advanced sorting algorithms for large datasets.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InsertionSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create an array of integers</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">98</span>, <span class="hljs-number">35</span>&#125;;<br><br>        <span class="hljs-comment">// Call the insertionSort function to sort the array</span><br>        insertionSort(arr);<br><br>        <span class="hljs-comment">// Print the sorted array</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">// Iterate through the array starting from the second element</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">insertVal</span> <span class="hljs-operator">=</span> arr[i];       <span class="hljs-comment">// Store the current element to be inserted</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>;      <span class="hljs-comment">// Initialize the index to the left of the current element</span><br><br>            <span class="hljs-comment">// Move elements greater than the current element to the right</span><br>            <span class="hljs-comment">// until the correct position for the current element is found</span><br>            <span class="hljs-comment">// be aware of the boundary conditions</span><br>            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<br>                insertIndex--;<br>            &#125;<br><br>            <span class="hljs-comment">// Place the current element in its correct position</span><br>            <span class="hljs-keyword">if</span> (insertIndex != i) &#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Selection Sort</title>
      <link href="/2023/09/04/Sort-Algorithm-Selection-Sort/"/>
      <url>/2023/09/04/Sort-Algorithm-Selection-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition:"></a>Definition:</h1><p>Selection sort is a simple comparison-based sorting algorithm that repeatedly selects the minimum element from the unsorted part of the array and places it at the beginning. It works by dividing the input array into two parts: the sorted and the unsorted portions. While straightforward, it has a time complexity of O(n^2), making it inefficient for large datasets.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectionSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Create an array of integers</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">101</span>, <span class="hljs-number">34</span>, <span class="hljs-number">99</span>, <span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">// Call the selectionSort function to sort the array</span><br>        selectionSort(arr);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">// Iterate through the array elements</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minNum</span> <span class="hljs-operator">=</span> arr[i];<br><br>            <span class="hljs-comment">// Find the minimum element in the unsorted part of the array</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (minNum &gt; arr[j]) &#123;<br>                    minNum = arr[j];<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// Swap the minimum element with the current element (if needed)</span><br>            <span class="hljs-keyword">if</span> (minIndex != i) &#123;<br>                arr[minIndex] = arr[i];<br>                arr[i] = minNum;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Print the sorted array</span><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort Algorithm - Bubble Sort</title>
      <link href="/2023/09/04/Sort-Algorithm-Bubble-Sort/"/>
      <url>/2023/09/04/Sort-Algorithm-Bubble-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition:"></a>Definition:</h1><p>Bubble sort is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares adjacent elements, and swaps them if they are in the wrong order. It continues these steps until the entire list is sorted. While straightforward, it’s not very efficient for large lists due to its O(n^2) time complexity.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>&#125;;<br><br>        bubbleSort(arr);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <br>        <span class="hljs-comment">// Initialize a flag to track if any swaps were made</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// Temporary variable for swapping elements</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// Loop through the array</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">// Iterate through the array up to the unsorted portion</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-comment">// Compare adjacent elements and swap if they are out of order</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    flag = <span class="hljs-literal">true</span>;    <span class="hljs-comment">// Set the flag to indicate a swap</span><br>                    temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// If no swaps were made in this pass, the array is already sorted</span><br>            <span class="hljs-keyword">if</span> (!flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// Reset the flag for the next pass</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Print the sorted array</span><br>        System.out.println(Arrays.toString(arr));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Eight Queen Problem</title>
      <link href="/2023/09/03/The-Eight-Queen-Problem/"/>
      <url>/2023/09/03/The-Eight-Queen-Problem/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>The Eight Queens Problem is a classic chess puzzle that involves placing eight queens on a chessboard in such a way that no two queens threaten each other. This means that no two queens can share the same row, column, or diagonal.</p><p>The challenge is to find all possible solutions to this problem.</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EightQueens</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">//Define an array to store the positions where the queens are placed.</span><br>    <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max];<br>    <span class="hljs-comment">//count the number of methods</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">EightQueens</span> <span class="hljs-variable">eightQueens</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EightQueens</span>();<br>        eightQueens.place(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;There are &quot;</span> + count + <span class="hljs-string">&quot; kinds of methods to solve the eight queens problem.&quot;</span>);<br>    &#125;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Place chess pieces in a recursive manner.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n the nth queen</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">place</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == max) &#123;<br>            printResult();<br>            count++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; max; i++) &#123;<br>            array[n] = i;<br>            <span class="hljs-keyword">if</span> (ifNotConflict(n)) &#123;<br>                place(n + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Check whether the newly placed chess piece conflicts with the previous ones.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n the nth queen</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> if the queen could be placed at this place</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">ifNotConflict</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i] == array[n] || <span class="hljs-comment">// on the same coloum</span><br>                    Math.abs(n - i) == Math.abs(array[n] - array[i])) &#123;  <span class="hljs-comment">// on the same diagonal</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            System.out.print(array[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use recursive backtracking to solve rat in a maze problem</title>
      <link href="/2023/09/01/Use-recursive-backtracking-to-solve-rat-in-a-maze-problem/"/>
      <url>/2023/09/01/Use-recursive-backtracking-to-solve-rat-in-a-maze-problem/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-and-background"><a href="#Problem-and-background" class="headerlink" title="Problem and background"></a>Problem and background</h1><p>Given a maze[][] of n * m matrix, a rat has to find a path from source to destination. </p><p>Use a recursive method to find the exit route of the maze.</p><p><em>Backtracking is a versatile algorithm used to find solutions for computational problems, particularly constraint satisfaction problems. It works by progressively generating potential solutions and discarding them (“backtracking”) as soon as it becomes clear that they cannot lead to a correct answer.</em></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h1><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm:"></a>Algorithm:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * find a route simply without considering the shortest route</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map maze</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> i   current location x</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> j   current location y</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> if the current location is the exit</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setWay</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-comment">// 1. started from (1,1)</span><br>    <span class="hljs-comment">// 2. exit at (6,5)</span><br>    <span class="hljs-comment">// 3. value 0 represents unexplored path, 1 represents walls,</span><br>    <span class="hljs-comment">//      2 represents a clear path, and 3 represents a dead end.</span><br>    <span class="hljs-comment">// 4. When exploring the maze, we follow the order of</span><br>    <span class="hljs-comment">//      down -&gt; right -&gt; up -&gt; left</span><br>    <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">4</span>] == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//find the exit</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123;    <span class="hljs-comment">// unexplored path</span><br>            map[i][j] = <span class="hljs-number">2</span>; <span class="hljs-comment">// assuming that this point is accessible.</span><br><br>            <span class="hljs-keyword">if</span> (setWay(map, i + <span class="hljs-number">1</span>, j)) &#123;   <span class="hljs-comment">//down</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j + <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">//right</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i - <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">//up</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j - <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">//left</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//it is a dead end</span><br>                map[i][j] = <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 1, 2 or 3, means explored</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="show-the-situation-of-maze"><a href="#show-the-situation-of-maze" class="headerlink" title="show the situation of maze"></a>show the situation of maze</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMap</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span>&#123;<br>    <span class="hljs-comment">//output the maze</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>            System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="main-class-including-the-creation-of-a-maze"><a href="#main-class-including-the-creation-of-a-maze" class="headerlink" title="main class (including the creation of a maze):"></a>main class (including the creation of a maze):</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//Create a two-dimensional array to simulate the maze.</span><br>    <span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>    <span class="hljs-comment">// value 1 means the wall</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>        map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">7</span>][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//original map</span><br>    System.out.println(<span class="hljs-string">&quot;The original map:&quot;</span>);<br>    showMap(map);<br>    System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">//set way to exit</span><br>    setWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//result</span><br>    System.out.println(<span class="hljs-string">&quot;Route: &quot;</span>);<br>    showMap(map);<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use RPN(Reverse Polish Notation) to implement calculator</title>
      <link href="/2023/01/25/Use-RPN-Reverse-Polish-Notation-to-implement-calculator/"/>
      <url>/2023/01/25/Use-RPN-Reverse-Polish-Notation-to-implement-calculator/</url>
      
        <content type="html"><![CDATA[<p>RPN(Reverse Polish Notation): Operators follow their operands, in contrast to PN(Polish Notation).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReversePolishNotation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        (3+4)*5-6 --&gt; 3 4 + 5 * 6 -</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffixNotation</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3 4 + 5 * 6 -&quot;</span>;<br><br><span class="hljs-comment">//        get string list</span><br>        List&lt;String&gt; rpnList = getListString(suffixNotation);<br><br><span class="hljs-comment">//        test</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculate(rpnList);<br>        System.out.println(result);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getListString</span><span class="hljs-params">(String suffixNotaion)</span> &#123;<br>        String[] split = suffixNotaion.split(<span class="hljs-string">&quot; &quot;</span>);<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (String element : split) &#123;<br>            list.add(element);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">//    RPN: from left to right</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-comment">//only need one stack</span><br>        Stack&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-comment">//regex</span><br>            <span class="hljs-keyword">if</span> (s.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<span class="hljs-comment">//multi-number</span><br>                <span class="hljs-comment">//push in numbers</span><br>                strings.push(s);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//when it comes to operator</span><br>                <span class="hljs-comment">//calculate 2 numbers, then push in the result</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Integer.parseInt(strings.pop());<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> Integer.parseInt(strings.pop());<br>                <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">switch</span> (s) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                        result = num1 + num2;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                        result = num1 - num2;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                        result = num1 * num2;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;%&quot;</span>:<br>                        result = num1 / num2;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;There&#x27;s something wrong with the operator.&quot;</span>);<br>                &#125;<br>                strings.push(String.valueOf(result));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(strings.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use stack to implement a calculator</title>
      <link href="/2023/01/25/Use-stack-to-implement-a-calculator/"/>
      <url>/2023/01/25/Use-stack-to-implement-a-calculator/</url>
      
        <content type="html"><![CDATA[<h1 id="使用栈完成表达式的计算思路"><a href="#使用栈完成表达式的计算思路" class="headerlink" title="使用栈完成表达式的计算思路:"></a>使用栈完成表达式的计算思路:</h1><ol><li><p>通过一个 index  值（索引），来遍历表达式</p></li><li><p>如果我们发现是一个数字, 就直接入数栈</p></li><li><p>如果发现扫描到是一个符号,  就分如下情况<br>  3.1 如果发现当前的符号栈为 空，就直接入栈<br>  3.2 如果符号栈有操作符，就进行比较,</p><p>  ​如果当前的操作符的优先级小于或者等于栈中的操作符， 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈， 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</p></li><li><p>当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</p></li><li><p>最后在数栈只有一个数字，就是表达式的结果</p></li></ol><h1 id="Define-stack-and-its-basic-method-of-it"><a href="#Define-stack-and-its-basic-method-of-it" class="headerlink" title="Define stack and its basic method of it."></a>Define stack and its basic method of it.</h1><p>(Such as pop, push, peek etc)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack2</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//size of stack</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack;    <span class="hljs-comment">//data</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;   <span class="hljs-comment">//top of the stack, initiated as -1</span><br><br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack2</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        <span class="hljs-built_in">this</span>.stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//push</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack has been full. Can&#x27;t push new value in it.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++;<br>        stack[top] = value;<br>    &#125;<br><br>    <span class="hljs-comment">//pop</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;The stack has been empty. Can&#x27;t pop.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">//peek</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stack[top];<br>    &#125;<br><br>    <span class="hljs-comment">//iterate (from top to bottom)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            System.out.println(<span class="hljs-string">&quot;stack[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + stack[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//get the priority of an operator</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">priority</span><span class="hljs-params">(<span class="hljs-type">int</span> oper)</span> &#123;<br>        <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;*&#x27;</span> || oper == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;+&#x27;</span> || oper == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//whether the argument is an operator</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOper</span><span class="hljs-params">(<span class="hljs-type">char</span> val)</span> &#123;<br>        <span class="hljs-keyword">return</span> val == <span class="hljs-string">&#x27;+&#x27;</span> || val == <span class="hljs-string">&#x27;-&#x27;</span> || val == <span class="hljs-string">&#x27;*&#x27;</span> || val == <span class="hljs-string">&#x27;/&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//calculation</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2, <span class="hljs-type">int</span> oper)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//used to store the result</span><br>        <span class="hljs-keyword">switch</span> (oper) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                result = num1 + num2;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                result = num2 - num1;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                result = num1 * num2;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;%&#x27;</span>:<br>                result = num2 / num1;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Implement-calculator"><a href="#Implement-calculator" class="headerlink" title="Implement calculator"></a>Implement calculator</h1><p>(This calculator can only calculate single digits)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3+2*6-2&quot;</span>;<br><br>        <span class="hljs-comment">//create two stacks, one for numbers, one for operators</span><br>        <span class="hljs-type">ArrayStack2</span> <span class="hljs-variable">numbers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">ArrayStack2</span> <span class="hljs-variable">operators</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// used as pointer</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            ch = expression.charAt(index);<br>            <span class="hljs-keyword">if</span> (operators.isOper(ch)) &#123;<br>                <span class="hljs-keyword">if</span> (operators.isEmpty()) &#123;<br>                    operators.push(ch);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (operators.priority(ch) &lt;= operators.priority(operators.peek())) &#123;<br>                        num1 = numbers.pop();<br>                        num2 = numbers.pop();<br>                        oper = operators.pop();<br>                        res = numbers.cal(num1, num2, oper);<br>                        numbers.push(res);<br>                        operators.push(ch);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        operators.push(ch);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                numbers.push(ch - <span class="hljs-number">48</span>);<br>            &#125;<br>            index++;<br>            <span class="hljs-keyword">if</span> (index &gt;= expression.length()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (operators.isEmpty())&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                num1 = numbers.pop();<br>                num2 = numbers.pop();<br>                oper = operators.pop();<br>                res = numbers.cal(num1, num2, oper);<br>                numbers.push(res);<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;The expression is: &quot;</span> + expression);<br>        System.out.println(<span class="hljs-string">&quot;The result is: &quot;</span> + numbers.peek());<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Improve-the-calculator-make-it-can-calculate-multi-digits"><a href="#Improve-the-calculator-make-it-can-calculate-multi-digits" class="headerlink" title="Improve the calculator: make it can calculate multi-digits"></a>Improve the calculator: make it can calculate multi-digits</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;30+2*6-2&quot;</span>;<br><br>        <span class="hljs-comment">//create two stacks, one for numbers, one for operators</span><br>        <span class="hljs-type">ArrayStack2</span> <span class="hljs-variable">numbers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">ArrayStack2</span> <span class="hljs-variable">operators</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// used as pointer</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">keepNum</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            ch = expression.charAt(index);<br>            <span class="hljs-keyword">if</span> (operators.isOper(ch)) &#123;<br>                <span class="hljs-keyword">if</span> (operators.isEmpty()) &#123;<br>                    operators.push(ch);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (operators.priority(ch) &lt;= operators.priority(operators.peek())) &#123;<br>                        num1 = numbers.pop();<br>                        num2 = numbers.pop();<br>                        oper = operators.pop();<br>                        res = numbers.cal(num1, num2, oper);<br>                        numbers.push(res);<br>                        operators.push(ch);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        operators.push(ch);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//Multi-digit</span><br>                keepNum += ch;<span class="hljs-comment">//used to store numbers</span><br>                <br>                <span class="hljs-keyword">if</span> (index == expression.length() - <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//end of the notation</span><br>                    numbers.push(Integer.parseInt(keepNum));<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operators.isOper(expression.charAt(index + <span class="hljs-number">1</span>))) &#123;<span class="hljs-comment">//end of this number</span><br>                    numbers.push(Integer.parseInt(keepNum));<br>                    <span class="hljs-comment">//ATTENTION!!! Clear keepNum</span><br>                    keepNum = <span class="hljs-string">&quot;&quot;</span>;<br>                &#125;<br><br>            &#125;<br>            index++;<br>            <span class="hljs-keyword">if</span> (index &gt;= expression.length()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (operators.isEmpty()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                num1 = numbers.pop();<br>                num2 = numbers.pop();<br>                oper = operators.pop();<br>                res = numbers.cal(num1, num2, oper);<br>                numbers.push(res);<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;The expression is: &quot;</span> + expression);<br>        System.out.println(<span class="hljs-string">&quot;The result is: &quot;</span> + numbers.peek());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use arrays to implement stack</title>
      <link href="/2023/01/14/Use-arrays-to-implement-stack/"/>
      <url>/2023/01/14/Use-arrays-to-implement-stack/</url>
      
        <content type="html"><![CDATA[<p>栈：先入后出(FILO-First In Last Out)的有序链表。top–bottom, pop–push。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//use arrays to implement stack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//size of stack</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack;    <span class="hljs-comment">//data</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;   <span class="hljs-comment">//top of the stack, initiated as -1</span><br><br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        <span class="hljs-built_in">this</span>.stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//push</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack has been full. Can&#x27;t push new value in it.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++;<br>        stack[top] = value;<br>    &#125;<br><br>    <span class="hljs-comment">//pop</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;The stack has been empty. Can&#x27;t pop.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">//iterate (from top to bottom)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The stack is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            System.out.println(<span class="hljs-string">&quot;stack[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + stack[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use circular linked list to solve Josephus problem</title>
      <link href="/2023/01/11/Use-circular-linked-list-to-solve-Josephus-problem/"/>
      <url>/2023/01/11/Use-circular-linked-list-to-solve-Josephus-problem/</url>
      
        <content type="html"><![CDATA[<p>[cited from wikipedia]Josephus Problem: A number of people are standing in a circle waiting to be executed. Counting begins at a specified point in the circle and proceeds around the circle in a specified direction. After a specified number of people are skipped, the next person is executed. The procedure is repeated with the remaining people, starting with the next person, going in the same direction and skipping the same number of people, until only one person remains, and is freed.</p><p>The problem—given the number of people, starting point, direction, and number to be skipped—is to choose the position in the initial circle to avoid execution.</p><h1 id="Nodes-in-the-list-data-next"><a href="#Nodes-in-the-list-data-next" class="headerlink" title="Nodes in the list(data + next)"></a>Nodes in the list(data + next)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> Node next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Node next)</span> &#123;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Circular-linked-list-and-the-solution"><a href="#Circular-linked-list-and-the-solution" class="headerlink" title="Circular linked list and the solution"></a>Circular linked list and the solution</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleSinglyLinkedList</span> &#123;<br>    <span class="hljs-comment">//initiate the first point</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(-<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//add nodes to the list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNode</span><span class="hljs-params">(<span class="hljs-type">int</span> nums)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;nums should not be smaller than 1.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums; i++) &#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(i);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>                first = child;<br>                first.setNext(first);<br>                curNode = first;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curNode.setNext(child);<br>                curNode = child;<br>                child.setNext(first);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//iterate the list</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//whether the list is empty</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;This list is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">curNode</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;The number of node is &quot;</span> + curNode.getNo());<br>            <span class="hljs-keyword">if</span> (curNode.getNext() == first) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curNode = curNode.getNext();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * solve Josephus problem by Circle Single Linked List</span><br><span class="hljs-comment">     * 1、创建helper指针，开始时指向环形链表最后一个结点</span><br><span class="hljs-comment">     * 2、开始count时，count m次即将first和helper同时移动m-1次</span><br><span class="hljs-comment">     * 3、然后将数到的结点出列</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> startNo  start from it</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> countNum every &#x27;countNum&#x27; get one node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sum      original number of nodes</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">josephus</span><span class="hljs-params">(<span class="hljs-type">int</span> startNo, <span class="hljs-type">int</span> countNum, <span class="hljs-type">int</span> sum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span> || startNo &lt; <span class="hljs-number">1</span> ||startNo&gt;sum)&#123;<br>            System.out.println(<span class="hljs-string">&quot;There&#x27;s something wrong with the list or the augments.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//create a helper and point it to the last node</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> first;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (helper.getNext() == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            helper = helper.getNext();<br>        &#125;<br><br>        <span class="hljs-comment">//move first and helper point to the startNo</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; startNo -<span class="hljs-number">1</span>; i++)&#123;<br>            first = first.getNext();<br>            helper = helper.getNext();<br>        &#125;<br><br>        <span class="hljs-comment">//start the count process</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//only one node left in the list</span><br>            <span class="hljs-keyword">if</span> (helper == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;countNum-<span class="hljs-number">1</span>; i++)&#123;<br>                first = first.getNext();<br>                helper = helper.getNext();<br>            &#125;<br><br>            <span class="hljs-comment">//get the &#x27;first&#x27; node</span><br>            System.out.println(<span class="hljs-string">&quot;Get the &#x27;&quot;</span> + first.getNo() +<span class="hljs-string">&quot;&#x27; node&quot;</span>);<br>            first = first.getNext();<br>            helper.setNext(first);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;The last node is &quot;</span> + first.getNo());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">CircleSinglyLinkedList</span> <span class="hljs-variable">circleSinglyLinkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CircleSinglyLinkedList</span>();<br>    circleSinglyLinkedList.addNode(<span class="hljs-number">5</span>);<br>    circleSinglyLinkedList.showList();<br><br>    <span class="hljs-comment">//test the Josephus</span><br>    circleSinglyLinkedList.josephus(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Singly Linked List</title>
      <link href="/2023/01/09/Singly-Linked-List/"/>
      <url>/2023/01/09/Singly-Linked-List/</url>
      
        <content type="html"><![CDATA[<p>单向链表——data＋next，只能从头向后遍历，头节点（head node）不存储信息。</p><h1 id="定义结点（node）"><a href="#定义结点（node）" class="headerlink" title="定义结点（node）"></a>定义结点（node）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickName;<br>    <span class="hljs-keyword">public</span> HeroNode next;<br><br>    <span class="hljs-comment">//constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hNo, String hName, String hNickName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = hNo;<br>        <span class="hljs-built_in">this</span>.name = hName;<br>        <span class="hljs-built_in">this</span>.nickName = hNickName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickName + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定义单链表（Singly-Linked-List）"><a href="#定义单链表（Singly-Linked-List）" class="headerlink" title="定义单链表（Singly Linked List）"></a>定义单链表（Singly Linked List）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//singly linked list and the create and delete of it</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkedList</span> &#123;<br>    <span class="hljs-comment">//head node</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">HeroNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">//create</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//find the last node of the linked list</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            temp = temp.next;<br>        &#125;<br>        temp.next = heroNode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">//another create</span><br>    <span class="hljs-comment">//add the new node to the right place by order</span><br>    <span class="hljs-comment">//if the no has existed, print error message</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode.no) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no) &#123;<br>                isExist = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isExist) &#123;<br>            System.out.println(<span class="hljs-string">&quot;This hero could not be added for the no of him(her) has existed.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;The no is &quot;</span> + heroNode.no + <span class="hljs-string">&quot;.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            heroNode.next = temp.next;<br>            temp.next = heroNode;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//print out</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;This linked list is empty.&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//delete</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//whether we found the node we need to delete</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//whether we reach the end of the nodelist</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no == no) &#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            temp.next = temp.next.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;The node doesn&#x27;t exist.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="获取链表长度（get-the-length-of-the-List）"><a href="#获取链表长度（get-the-length-of-the-List）" class="headerlink" title="获取链表长度（get the length of the List）"></a>获取链表长度（get the length of the List）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get the number of node in a linked list</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head head node</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> number of node</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNodeLength</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">null</span>) &#123;<br>        length++;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找单链表中的倒数第k个结点（find-the-last-k-one-node-of-a-singly-linked-list）"><a href="#查找单链表中的倒数第k个结点（find-the-last-k-one-node-of-a-singly-linked-list）" class="headerlink" title="查找单链表中的倒数第k个结点（find the last k one node of a singly linked list）"></a>查找单链表中的倒数第k个结点（find the last k one node of a singly linked list）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查找单链表中倒数第k个结点</span><br><span class="hljs-comment">//1. 编写一个方法，接收head结点与index值</span><br><span class="hljs-comment">//2. index表示单链表中的倒数第k个结点</span><br><span class="hljs-comment">//3. 先把链表从头到尾遍历一遍，得到总长度size</span><br><span class="hljs-comment">//4. 从链表头开始遍历到第（size - index）个</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title function_">findLastIndexNode</span><span class="hljs-params">(HeroNode head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> getNodeLength(head);<br>    <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">0</span> || index &gt; size) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size - index; i++) &#123;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="反转单链表（reverse-a-singly-linked-list）"><a href="#反转单链表（reverse-a-singly-linked-list）" class="headerlink" title="反转单链表（reverse a singly linked list）"></a>反转单链表（reverse a singly linked list）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 反转单链表</span><br><span class="hljs-comment"> * 1、遍历原链表</span><br><span class="hljs-comment"> * 2、将每个结点的下一个结点存储到next</span><br><span class="hljs-comment"> * 3、将处理中的结点的下一个结点，改为反转结点头后第一个结点</span><br><span class="hljs-comment"> * 4、将处理中的结点连接到反转结点头之后</span><br><span class="hljs-comment"> * 5、移动到next结点、继续处理上述步骤</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseList</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span> || head.next.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">reverseHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//遍历原链表，每遍历一个结点就将其取出、放在新链表reverseHead的最前端</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        next = cur.next;<br>        cur.next = reverseHead.next;<br>        reverseHead.next = cur;<br>        cur = next;<br>    &#125;<br>    head.next = reverseHead.next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="倒序打印单链表-print-a-singly-linked-list-from-last-one-to-the-first-one"><a href="#倒序打印单链表-print-a-singly-linked-list-from-last-one-to-the-first-one" class="headerlink" title="倒序打印单链表 (print a singly linked list from last one to the first one)"></a>倒序打印单链表 (print a singly linked list from last one to the first one)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 倒序打印单向链表</span><br><span class="hljs-comment"> * 使用栈（stack）实现</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reversePrint</span><span class="hljs-params">(HeroNode head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;HeroNode&gt;();<br>    <span class="hljs-type">HeroNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        stack.push(cur);<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (stack.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        System.out.println(stack.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using arrays to implement queues (JAVA)</title>
      <link href="/2022/12/28/Using-arrays-to-implement-queues/"/>
      <url>/2022/12/28/Using-arrays-to-implement-queues/</url>
      
        <content type="html"><![CDATA[<p>队列（Queue）：有序列表，可以用数组或链表实现。先入先出。</p><h1 id="数组模拟普通队列"><a href="#数组模拟普通队列" class="headerlink" title="数组模拟普通队列"></a>数组模拟普通队列</h1><p>front: point to the previous place of the first element.</p><p>rear: point to the last element.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueueDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试功能</span><br>        <span class="hljs-type">ArrayQueue</span> <span class="hljs-variable">arrayQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayQueue</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;s:show 显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e:exit 退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a:add 添加数据到队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g:get 从队列中取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h:head 从队列中读取头数据&quot;</span>);<br>            key = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                    arrayQueue.showQueue();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                    scanner.close();<br>                    System.out.println(<span class="hljs-string">&quot;Exit the program.&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Please enter a number:&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    arrayQueue.addQueue(value);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> arrayQueue.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;You get the value: &quot;</span> + v);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> arrayQueue.peed();<br>                        System.out.println(<span class="hljs-string">&quot;The head of queue is &quot;</span> + result);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//使用数组模拟普通队列</span><br>    <span class="hljs-comment">//并未模拟环形队列，因此此数组队列空间只能利用一次</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//数组的最大容量</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;  <span class="hljs-comment">//队列头</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;   <span class="hljs-comment">//队列尾</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr;  <span class="hljs-comment">//用于存储数据，模拟队列</span><br><br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span> &#123;<br>            maxSize = arrMaxSize;<br>            arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>            front = -<span class="hljs-number">1</span>;<br>            rear = -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否已满</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> rear == maxSize - <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否为空</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> front == rear;<br>        &#125;<br><br>        <span class="hljs-comment">//添加数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isFull()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is full and you cannot add data in it.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            rear++;<br>            arr[rear] = n;<br>        &#125;<br><br>        <span class="hljs-comment">//出队列</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty. You cannot get data from it.&quot;</span>);<br>            &#125;<br>            front++;<br>            <span class="hljs-keyword">return</span> arr[front];<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列的所有数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列头数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peed</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr[front + <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组模拟环形队列（Circular-Queue）"><a href="#数组模拟环形队列（Circular-Queue）" class="headerlink" title="数组模拟环形队列（Circular Queue）"></a>数组模拟环形队列（Circular Queue）</h1><p>front: point to the first element. Initiated as 0.</p><p>rear: point to the place after the last element. Initiated as 0.</p><p><strong>isFull: (rear + 1) % maxSize &#x3D;&#x3D; front</strong></p><p><strong>isEmpty: rear &#x3D;&#x3D; front</strong></p><p><strong>size: (rear - front + maxSize) % maxSize</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleArrayQueueDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试功能</span><br>        <span class="hljs-type">circleArray</span> <span class="hljs-variable">circleArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">circleArray</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">char</span> key;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;s:show 显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e:exit 退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a:add 添加数据到队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g:get 从队列中取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h:head 从队列中读取头数据&quot;</span>);<br>            key = scanner.next().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                    circleArray.showQueue();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                    scanner.close();<br>                    System.out.println(<span class="hljs-string">&quot;Exit the program.&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Please enter a number:&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>                    circleArray.addQueue(value);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> circleArray.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;You get the value: &quot;</span> + v);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> circleArray.peed();<br>                        System.out.println(<span class="hljs-string">&quot;The head of queue is &quot;</span> + result);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//数组模拟环形队列，可重复使用空间</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">circleArray</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;    <span class="hljs-comment">//数组的最大容量</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;  <span class="hljs-comment">//队列头</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;   <span class="hljs-comment">//队列尾</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] arr;  <span class="hljs-comment">//用于存储数据，模拟队列</span><br><br>        <span class="hljs-comment">//构造器</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">circleArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span> &#123;<br>            maxSize = arrMaxSize;<br>            arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>            front = <span class="hljs-number">0</span>;<br>            rear = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否已满</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否为空</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> front == rear;<br>        &#125;<br><br>        <span class="hljs-comment">//添加数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isFull()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is full and you cannot add data in it.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            arr[rear] = n;<br>            rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>        &#125;<br><br>        <span class="hljs-comment">//出队列</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty. You cannot get data from it.&quot;</span>);<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> arr[front];<br>            front = (front + <span class="hljs-number">1</span>) % maxSize;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br><br>        <span class="hljs-comment">//求有效数据个数</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> (rear - front + maxSize) % maxSize;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列的所有数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> front; i &lt; front + size(); i++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列头数据</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peed</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;This queue is empty.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr[front];<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conversion between sparse arrays and two-dimensional arrays using Java</title>
      <link href="/2022/12/27/Conversion-between-sparse-arrays-and-two-dimensional-arrays-using-Java/"/>
      <url>/2022/12/27/Conversion-between-sparse-arrays-and-two-dimensional-arrays-using-Java/</url>
      
        <content type="html"><![CDATA[<p>稀疏数组（sparse array）: 非线性结构。当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。第一行保存行数、列数、数据总数。</p><h6 id="二维数组转稀疏数组思路："><a href="#二维数组转稀疏数组思路：" class="headerlink" title="二维数组转稀疏数组思路："></a>二维数组转稀疏数组思路：</h6><ol><li>遍历原始数组，得到数据总数（sum）</li><li>创建新稀疏数组’int [sum+1] [3]’</li><li>再次遍历，将有效数据存入稀疏数组中</li></ol><h6 id="稀疏数组转二维数组思路："><a href="#稀疏数组转二维数组思路：" class="headerlink" title="稀疏数组转二维数组思路："></a>稀疏数组转二维数组思路：</h6><ol><li><p>根据稀疏数组第一行的数据，创建原始二维数组</p></li><li><p>根据稀疏数组后面几行的数据，将数据赋予原始二维数组。</p></li></ol><h5 id="例：在一个11-11的棋盘上有两个棋子，记录这两个棋子的信息。"><a href="#例：在一个11-11的棋盘上有两个棋子，记录这两个棋子的信息。" class="headerlink" title="例：在一个11*11的棋盘上有两个棋子，记录这两个棋子的信息。"></a>例：在一个11*11的棋盘上有两个棋子，记录这两个棋子的信息。</h5><h6 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  原始二维数组，0代表无棋子，1代表黑棋，2代表白棋</span><br>        <span class="hljs-type">int</span>[][] chessArrayOri = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        chessArrayOri[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        chessArrayOri[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//打印原始二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArrayOri) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br><span class="hljs-comment">//  二维数组转稀疏数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArrayOri.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArrayOri.length; j++)&#123;<br>                <span class="hljs-keyword">if</span> (chessArrayOri[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-comment">//统计数据总数</span><br>    <span class="hljs-type">int</span>[][] sparseArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = chessArrayOri.length;<br>        sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = chessArrayOri[<span class="hljs-number">0</span>].length;<br>        sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<span class="hljs-comment">//构建稀疏数组第一行信息</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArrayOri.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArrayOri.length; j++)&#123;<br>                <span class="hljs-keyword">if</span> (chessArrayOri[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparseArray[count][<span class="hljs-number">0</span>] = i;<br>                    sparseArray[count][<span class="hljs-number">1</span>] = j;<br>                    sparseArray[count][<span class="hljs-number">2</span>] = chessArrayOri[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-comment">//将数据存入稀疏数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : sparseArray) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<span class="hljs-comment">//打印生成的稀疏数组</span><br><br><span class="hljs-comment">// 稀疏数组转二维数组</span><br>        <span class="hljs-type">int</span>[][] chessArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sparseArray.length; i++)&#123;<br>            chessArr[sparseArray[i][<span class="hljs-number">0</span>]][sparseArray[i][<span class="hljs-number">1</span>]] = sparseArray[i][<span class="hljs-number">2</span>];<br>        &#125;<span class="hljs-comment">//生成二维数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;==========================================&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] row : chessArr) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : row) &#123;<br>                System.out.print(item + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<span class="hljs-comment">//打印还原的二维数组</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【221102】杂感</title>
      <link href="/2022/11/02/%E3%80%90221102%E3%80%91%E6%9D%82%E6%84%9F/"/>
      <url>/2022/11/02/%E3%80%90221102%E3%80%91%E6%9D%82%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误了喵" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3da6e1cee0ece4b920c90b2fe3cab9f96e11d973221881ed4975b7944db745f3">06423e480afdff19d80aaca02b9d701a5240975623adc9f7a645b7a39a16e08bc19fe3aa9f7a458a581685b49728ac5abaae0185c4888f4e05d2a27e9aa9e5b4ae977fa0dabfea445b72d78d21531c85bf29cc8494e98bb3dc9fd6d8b4ae383564372ae40bf382e38ec2f5247fa11f8831dd217788c16ac4af5c5fa89ec357dd9a04a25e3516e76cdec5a675730062ee512e8eed573c1b64bf859c3768e5150ce365fcddcf484afd6f37673fd2b1edafa49953ec2dacbc3c1b75c0c4d256b9c6769e96608d4f2f7377b0d50ad9fb55c177ee52c484c0bf1c72acf6d4fa27dff52c5a947039f09d13214381782a1ea0dd3a7be210adf3972806696d7a83595646b3b118bf759d40533c7da408a3c0d1157849fb81159d3df55ddf1b9120120457adfb2e41ca583c6d68fbd834db92186192b8038bf393226aa6798cc2e6c04c9e133410dde4d874dd1428c1f330ee2974aa78e91f58248191593e58e4d2c50709728497715d2e963e1acd811ec7e3b20806c12da9171b5f4b0c9b5c9771b5949d0cf69daf174c958f04891b50af275bc3d4114c57445908edfcd396c1bec84077861dcb3b7c162ad05a8a485c8c2ec934b0188da0d70427e637d3d96241894613b3fddb5b6e84feaf10562a3146f1c4456655fc59984047fbf333a17d3e98c4a9bbbfe90c550103728d62caa46ca50d16d3a0be95195eac5275e63b4faa9fab673aa3624457a04935e34b60a5f7ef42383043ecfdcb32e35f7724c015f1eb2732a4e2dc7bae59fa253ad794b12b016854fc2eb42237359a4263dffd3d9a4ae2ff670a3d9e9e665b91b98c15b1239f5abab1cea18c88074ce79f0b1fe860e4ce01180c04881017facd2ec6dcb1ce4a94f39c3380ed35e91ef97209d6a4ed19f6d8437c8e4518913b3a583e7921e8f9ec500b375e5d27a9302c84f0829306146a5097fbd90de2706b806380c2b393f56f095f6d101c383e0350b2f3cbb7669b71e257f6060d9f3704ffb3138d72e0c8c10cc03848fdaebedd4662b898d2f6e507ac1e88b46678aa2d17314afe5f7f72a8b9719a2b3f996250fc3b33d1289c6eb85b08c1d74ca02e0b48808500aa33c264e410b0fa15502faba0e4ac1ba29eb2f3cee6c43667ccfaf6d4a30f0e90b4af84c762d45cda3245e01bafdf5e8d33c19ab2496c1b04eeba8bc8f37ee50b8d9b1d498ea61a09abf360c48973ce0defda6f7105f689e0edf68171bf41faf94aaf3f3e843d3f392e8d50a9805a6bab99cd85472c53c708191e0513c72b2cf1a795c9ad35f63a78f04df9ef77a952b1dce9307ea9b64aebfa9737518a27bf755c24dff79e4ef96af9108fccc58a977fd5e6faabfa6a9be00b4e3ef9edb92a226eefcbd90a6340c4ad7a03e49a88cbcf4780da49658747e804e35c82f9ff6ef95d0d937cf02185d8d933c3e108354ab65b7c7026fb08846eb6d4543fe692831e95fbc1cd5f666a31180cfb15ddbfeeb7d00cc189ee70c5717767491793f13065a97da0b54e6088e115f03e9e65f167f26470100377aef4db426bea851fcae2369a0d347dee7aec6bc9796e07a623536169bb74a2b4a266e2bc427c0e2d2a3ef054c63340d5eb738f5b48fff5cde4fcc9e97ccb26de529c628fbeb2c8828cf98f700cebf3fa717288627c6dd6cc1a3c4f6d7511e94a95d8fa06ac92ec8cef1efb84c5c7d6fdd377bd4155040786af801c4f75331c09cf6fbba086c8d5b4cf15e52466406f9d02b2cbb458c2a6824935cf3fd575e96ff1888909cbcbaddd0482d591928be5e322bed1dbcac621f0bcd8a134d69e69cfefd5e553000eed0c6de4ae3666863dea4490685f9211421b5b2bb3d0b40e027bf6000340b0b614e1e70ade362c7dc53294eb0b18aadaa219122269ab00c08d3b77a38f05decc09ebdb2a2de2ef67cca1c14179110b54feb16cd6aef47e12325c21bd63be3776541582ddea6c213c183f33e739b224c4df075ffeca09d8a39a96b178be04ad87812475cbfeb1d0f4821692cbf6b47f826a4ac5dd1597908f4ad59ef0d3a4f2ec208ce892607b2356328299fb7a8023ca1750af46fc08081359d6c71eea7ee6724c1fb5afeb70afc8d51d2981f2215a927a8d0e9fc1d5bd7ae5be4035eaf8b561ca2f090cc04bfe780874e907e73c7a1e6723b177f3fdb359081d45947e142469217dffcddbc501174c7891d2b1052138e4f22e031cadf4e12efacfc640220f10fc2a7f84ee104032f7435f12fe71c25a0e9840941b882f3bb3bdd748343c23b48b7de6baddec199f770aa309747a593e0a8c1879647cd57b31d560ec6a73e305612e6f729d6c68bd6591952d82680c33a0d15966e4587c676364b9d7aa4e0b656b690b2fc08b9c620e2d296a7047309e6d0292bf77ff9279d9725479610f6f606026cdb1472db446caa1405c54c6d758ea35c989c6b780ec26833ea5f8d14651f794687a14589c006a893cf842eed16d104bf66e816c22d72d0d404371750a0578f1a654b6bb2eb6a2464d40e4981db002f11e881a5cda5ac2463bc45a563095b1a0c3b8a84718a4ee299e5dbc0d1fc678e047e878d3b57bfa11b15f31ed3e0230fc6081c09bc0268ae905522f7685eace7809d22a5f073f58c04d2ccd6af5ad87503ccb291bb3ad83e23f218e60a3eb8512c0af52499bafc427a9e440569595803e6d61bfc2e524404cb511a49fd435b0a331f2a85afd2e5a8311a97a8c7b19fada66c0282424f6c88c4f662a7d0ddd82b3138d6a912f5990e4288a45d5c2b02e177e71a6d89b32a575e525783f25fdb1ed6cbb1495e4ce22177f2502dd913de27001e10be6e50cdb546f31039b0ef6c2266d2abebe77b3529c83a287c29648418b60ab3d7e1d87506a9a8be56fa49568620d295300c54882b3b78b5aaa8ed3b29c59a4203099df045191e0644f407e395fb76c8aed63a6935c4c74a8929c512115313272ee23ee9681247c0b39da418ed9a52d91ad8e67e54cf26d841f0b1082885dc598a38a4512bbe1d42539cd21087a0752b6fb669f6ae388b1afa47e991736bdeb9de0ab08eccfe56e4439088cf8609dfa57f29784914a5f40b613e4fb8704616cc6bafe375b00bbbb54bcd1da6a67cecdc30cb6ffcbac846960bdb42c10ba97a54ec8e7fd05e56d29f84a9781627cf527826f1e76dd30fdb89a2f00ae7543652de61a68799a9ce58e33cd6c0d3e6bb9d93aaa952183838102f9fe3be26b3bca64ee5d98bc96a3224fcfdb42c6e883ff3f88a41e7fa0574a38720b39c38823597112a23cc4ffe604441b24b2ab4d7f8064c24a66f5ac350868318a129012d08cedfa197c2893d19fe8c6d0f8103cb42c074f75eec37a1479e7f39e283904a4bc431cf52f5d3422185b405becc8d3375587f57c3b4c48be9a08b0198cdb2ddb8049847980269ecd6366dc6dd487ad5321b5dfaae4185587905c98f296790d0c855e3cc97509a09aa7fa9b98744b5747e80dbf65506fb9e922fbf43110a662048387425c155c6b1420e28cf154779bacdef3c7f077f4cced1fd8e5bc0149ae0f157665a9577817e253b780157c527b16d50acbf0808b9080efd21250663bfb0b1ee0efbfc9c11cb6b8c771239e6e567fa131f5b4ef6da7bb4f6bf97c1d125c963c9d9fb8c90084774e73684979378f1ed70b837cee682ceff6ee5d7f317b7145bd327257bb3fc12b8b4a6db3d604d53d4d5ca2670eae9217222933426ac33bf8e4853d8f5aa92f3d68b130d45a68ca0967d22883dbe4c9c732b8b7dbfcd030b5e36d8e5e3fd2f0140ff5f09adcf25f4ceebfd6f608734470b64deac29fd8ba4be87a4b725c9be1f3c93e49742ce510a9292d941c420c9ac1351d5858b4e850550a9509e977840364019a11cd2a681d3c9a407a8680a47053df9031d40eec4b56df2dea6fb26e896ecf0b03c2999081db2decf985f9ed83ad3dad7ac2828a18aef1211201237e7c811409fa8199137670d3b572e121e562709a631b1ec9bc3b003408ad5fc1fce0cf0d56f244449fcc3c9e5757482206189a4fca425e0ab7580d7e1c9e2f2d559126b95bdc46a5f1a5f7b7693c8c476676844553931f32a3dd14566c713ac8e4ab2370f0d3fdfc0028402b8118e031d119a22bd4deeedee001c0abb6c5a67ec249f7fdc383c6f695f467edc4f168e4cc9a370bf3050bad274e9b82b6091efea42d13bcaa0452d3cfb3933a38431920dd82d78deff34980529d951cdb5e3f4c777d3f28306bc9c22b836b152213499192987a55171ef707c7a34bfa22c7b14594b40e783ea46af25a1a6076167562c133a1f1f0a7b12013e4d408d6f34de7be6edfd66fc3bd9ed896fbbdb71ae85972b2342486534c2bfbf695240dabad4dfb247333a9521b5fd2826a21538cc912247cc948fc4d8ad7d80101a33f46e87cf0e6c1c756daa9108bee5d26ba8aae27bb1072588b55c16401f28f620c8559760a7f2f9f95d240742a791234fa61aa37b978c80cecaa875b6a5e05869c9b03dd781485553da60c1986fdb65641885f231ac51acfea7ae62ad88fa902ed4b7dbdc1a3244c75d58197292310493e3a3af7d5d8a777abf5b0463549630bf5d7a0b19aef9b4b36900f1337136272bc35fb978a075da0ce78fb4bbe96776bcb409a07027795cd0b8430e36869f11eb176c14a3cbe9b21ac48b195d9188fa05534c2f9ab12a71b0d55c8109e317d417b50082f51728e8eb312df4e9f2aa982d516becc9b5313a523c5c08e8d4e5ff59f435dfc7ec1726bd50d2466f71205ad94107cf5329e01badd89424cad5ae78cbbc4a7428821d7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码喵</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 杂感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Workbench在使用时出现‘Could not acquire management access for administration’的错误</title>
      <link href="/2022/09/21/MySQL-Workbench%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%98Could-not-acquire-management-access-for-administration%E2%80%99%E7%9A%84%E9%94%99%E8%AF%AF/"/>
      <url>/2022/09/21/MySQL-Workbench%E5%9C%A8%E4%BD%BF%E7%94%A8%E6%97%B6%E5%87%BA%E7%8E%B0%E2%80%98Could-not-acquire-management-access-for-administration%E2%80%99%E7%9A%84%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>前几天在新电脑上安装了MySQL后，一直没有测试过功能，今天下午上pratical时才发现能连上server却无法访问administration权限。</p><blockquote><p>Could not acquire management access for administration</p><p>RuntimeError: Target host is configured as Windows, but seems to be a different OS. Please review the connection settings.</p></blockquote><p>向tutor请教也只是让我重装正确版本的MySQL。于是自己在网上搜了一圈，尝试更改了很多设置最终发现，是win11中文操作系统的编码问题，似乎是MySQL从8.0.25版本开始才出现的问题。</p><p>解决方法：</p><ol><li>设置→时间和语言→相关设置→管理语言设置</li><li>弹出的区域窗口中→管理标签页→更改系统区域设置</li><li>win11直接勾选上“Beta版：使用Unicode UTF-8 提供全球语言支持”，没有这个选项的话就把系统区域设成英文区吧。</li></ol><p>后记：当然如果我当初要是不偷懒把系统早点改成英文版就没这些事了呃，浪费了两个小时一点一点改系统设置环境变量真是要了命，最终居然只是因为中文编码问题……</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Second Test</title>
      <link href="/2022/09/21/My-Second-Test/"/>
      <url>/2022/09/21/My-Second-Test/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误了喵" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="afc8c590a60977c1c6792077220c8eb370a19825be9cbeb3f46ff33e9010df8c">4630436162ade97ba2718b7d0c4b3b63b2634c936bf548cbdc9e744d48770c30cd443aa754143ca051602956a1a1c1d4d957ee0606d3166a5ac7dce9c2b144b4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码喵</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Test</title>
      <link href="/2022/09/21/My-First-Test/"/>
      <url>/2022/09/21/My-First-Test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/20/hello-world/"/>
      <url>/2022/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
